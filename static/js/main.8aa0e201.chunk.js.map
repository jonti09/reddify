{"version":3,"sources":["api/config.js","api/index.js","components/navbar/Navbar.jsx","components/Posts.jsx","components/Search.jsx","App.js","serviceWorker.js","index.js"],"names":["redditConfig","SCOPE","REDIRECT_URI","process","CLIENT_ID","RESPONSE_TYPE","STATE","replace","c","r","Math","random","toString","DURATION","CLIENT_SECRET","getCookie","load","queryCookie","key","cookie","getProfile","token","a","axios","url","method","headers","Authorization","data","refreshToken","requestData","FormData","append","btoa","cookieData","setCookie","makeQuery","params","queryParams","Object","keys","forEach","searchReddit","getToken","code","profile","name","window","location","getSavedPosts","console","log","Navbar","props","login","loadPosts","className","href","style","borderRight","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","onClick","Posts","posts","Fragment","map","post","text","content","src","alt","length","substr","Search","search","useState","q","limit","sort","searchData","setSearchData","searchTerm","useEffect","focus","formSubmitted","event","preventDefault","onSubmit","onKeyPress","htmlFor","ref","input","placeholder","onChange","target","value","defaultValue","label","option","App","setPosts","result","URLSearchParams","get","URL","redditOAuth","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8aa0e201.chunk.js","sourcesContent":["const getUUID = () => {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    // eslint-disable-next-line no-mixed-operators\n    let r = (Math.random() * 16) | 0,\n      v = c === 'x' ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n};\n\nexport const redditConfig = {\n  SCOPE: `identity,edit,flair,history,modconfig,modflair,modlog,modposts,modwiki,mysubreddits,privatemessages,read,report,save,submit,subscribe,vote,wikiedit,wikiread`,\n  REDIRECT_URI: process.env.REACT_APP_REDDIT_REDIRECT,\n  CLIENT_ID: process.env.REACT_APP_REDDIT_CLIENT_ID,\n  RESPONSE_TYPE: 'code',\n  STATE: getUUID(),\n  DURATION: 'permanent',\n  CLIENT_SECRET: process.env.REACT_APP_REDDIT_CLIENT_SECRET,\n};\n","import axios from 'axios';\nimport { load, save as setCookie } from 'react-cookies';\nimport { redditConfig } from './config';\n\nconst cookieName = 'reddify_token';\n\nconst getCookie = () => {\n  return load(cookieName);\n};\n\nexport const queryCookie = (key) => {\n  const cookie = getCookie();\n  return cookie && cookie[key];\n};\n\nconst getProfile = async (token) => {\n  const { data } = await axios({\n    url: 'https://oauth.reddit.com/api/v1/me',\n    method: 'GET',\n    headers: { Authorization: `${token}` },\n  });\n\n  return data;\n};\n\nconst refreshToken = async () => {\n  if (!queryCookie('refresh_token')) {\n    return;\n  }\n  const requestData = new FormData();\n  requestData.append('grant_type', 'refresh_token');\n  requestData.append('refresh_token', queryCookie('refresh_token'));\n  requestData.append('duration', 'permanent');\n\n  const { data } = await axios({\n    method: 'POST',\n    url: 'https://www.reddit.com/api/v1/access_token',\n    headers: {\n      Authorization: 'Basic ' + btoa(redditConfig['CLIENT_ID'] + ':' + redditConfig['CLIENT_SECRET']),\n      'Content-Type': 'application/x-www-form-urlencoded',\n    },\n    data: requestData,\n  });\n\n  const cookieData = getCookie();\n  setCookie(cookieName, {\n    ...cookieData,\n    ...data,\n  });\n};\n\nconst makeQuery = (params) => {\n  let queryParams = '?';\n  if (params && Object.keys(params)) {\n    Object.keys(params).forEach((key) => {\n      queryParams = `${queryParams}${key}=${params[key]}&`;\n    });\n  }\n\n  return queryParams;\n};\n\nexport const searchReddit = async (queryParams) => {\n  const { data } = await axios({\n    method: 'GET',\n    url: `https://www.reddit.com/search.json${makeQuery(queryParams)}`,\n  });\n\n  return data;\n};\n\nexport const redditOAuth = () => {\n  const { CLIENT_ID, RESPONSE_TYPE, STATE, REDIRECT_URI, SCOPE, DURATION } = redditConfig;\n  const URL = `https://www.reddit.com/api/v1/authorize?client_id=${CLIENT_ID}&response_type=${RESPONSE_TYPE}&state=${STATE}&duration=${DURATION}&redirect_uri=${REDIRECT_URI}&scope=${SCOPE}`;\n\n  window.location.replace(URL);\n};\n\nexport const getToken = async (code) => {\n  const requestData = new FormData();\n  requestData.append('grant_type', 'authorization_code');\n  requestData.append('code', code);\n  requestData.append('redirect_uri', redditConfig['REDIRECT_URI']);\n\n  const { data } = await axios({\n    method: 'POST',\n    url: 'https://www.reddit.com/api/v1/access_token',\n    headers: {\n      Authorization: 'Basic ' + btoa(redditConfig['CLIENT_ID'] + ':' + redditConfig['CLIENT_SECRET']),\n      'Content-Type': 'application/x-www-form-urlencoded',\n    },\n    data: requestData,\n  });\n\n  const profile = await getProfile(`${data['token_type']} ${data['access_token']}`);\n  setCookie(cookieName, {\n    ...data,\n    ...{\n      name: profile['name'],\n    },\n  });\n  refreshToken();\n  window.location.replace('/');\n};\n\nexport const getSavedPosts = async () => {\n  const { data } = await axios({\n    url: `https://oauth.reddit.com/user/${queryCookie('name')}/saved`,\n    method: 'GET',\n    headers: { Authorization: `${queryCookie('token_type')} ${queryCookie('access_token')}` },\n  });\n\n  console.log(data);\n  return data\n};\n","import React from 'react';\nimport { queryCookie } from '../../api';\n\nfunction Navbar(props) {\n  const { login, loadPosts } = props;\n\n  const styles = {\n    navBrand: {\n      borderRight: 'none',\n    }\n  }\n\n  const authJSX = () => {\n    if (queryCookie('access_token')) {\n      return (\n        <button className=\"btn btn-outline-warning my-2 my-sm-0\" onClick={loadPosts}>\n          <i className=\"fas fa-download\"></i>\n          <span className=\"ml-2\">Get Saved Posts</span>\n        </button>\n      );\n    } else {\n      return (\n        <button className=\"btn btn-outline-warning my-2 my-sm-0\" onClick={login}>\n          <i className=\"fab fa-reddit-alien\"></i>\n          <span className=\"ml-2\">Login</span>\n        </button>\n      );\n    }\n  };\n  return (\n    <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n      <a className=\"navbar-brand\" href=\"/\" style={styles['navBrand']}>\n        Reddify\n      </a>\n      <button\n        className=\"navbar-toggler\"\n        type=\"button\"\n        data-toggle=\"collapse\"\n        data-target=\"#navbarSupportedContent\"\n        aria-controls=\"navbarSupportedContent\"\n        aria-expanded=\"false\"\n        aria-label=\"Toggle navigation\"\n      >\n        <span className=\"navbar-toggler-icon\"></span>\n      </button>\n\n      <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n        <ul className=\"navbar-nav mr-auto\"></ul>\n        {authJSX()}\n      </div>\n    </nav>\n  );\n}\n\nexport default Navbar;\n","import React from 'react';\n\nfunction Posts(props) {\n  const { posts } = props;\n  const redditBaseUrl = 'https://reddit.com';\n\n  const getDisplayText = (text) => {\n    if (text.length > 255) {\n      return `${text.substr(0, 253)} ...`;\n    } else {\n      return text;\n    }\n  };\n\n  return posts ? (\n    <React.Fragment>\n      <div className=\"card-columns\">\n        {posts.map((post) => {\n          let content = post['data'];\n          return (\n            <div className=\"card\" key={content['id']}>\n              <img src={content['url']} className=\"card-img-top\" alt=\"\" />\n              <div className=\"card-body \">\n                <h5 className=\"card-title\">\n                  <a href={`${redditBaseUrl}${content['permalink']}`}>{content['title']}</a>\n                </h5>\n                <p className=\"card-text\">{getDisplayText(content['selftext'])}</p>\n              </div>\n              <footer className=\"card-footer\">\n                <a\n                  className=\"btn btn-outline-primary btn-sm\"\n                  href={`${redditBaseUrl}/${content['subreddit_name_prefixed']}`}\n                >\n                  {content['subreddit_name_prefixed']}\n                </a>\n                <button className=\"btn btn-outline-warning btn-sm float-right\">\n                  <span className=\"fas fa-arrow-up\"></span>\n                  <span className=\"ml-1\">{content['ups']}</span>\n                </button>\n              </footer>\n            </div>\n          );\n        })}\n      </div>\n    </React.Fragment>\n  ) : (\n    ''\n  );\n}\n\nexport default Posts;\n","import React, { useEffect, useState } from 'react';\n\nfunction Search(props) {\n  const { search } = props;\n  const [searchData, setSearchData] = useState({ q: '', limit: 25, sort: 'hot' });\n  let searchTerm = null;\n\n  useEffect(() => {\n    searchTerm.focus();\n  });\n\n  const setSearchTerm = (event) => {\n    setSearchData({ ...searchData, q: event.target.value });\n  };\n\n  const setSearchSortType = (event) => {\n    setSearchData({ ...searchData, sort: event.target.value });\n  };\n\n  const setSearchLimit = (event) => {\n    setSearchData({ ...searchData, limit: event.target.value });\n  };\n\n  const formSubmitted = (event) => {\n    search(searchData);\n    event.preventDefault();\n  };\n\n  const keyPressed = (event) => {\n    if (event.key === 'Enter') {\n      formSubmitted(event);\n    }\n  };\n\n  const sortOptions = [\n    {\n      value: 'hot',\n      label: 'Hot',\n    },\n    {\n      value: 'relevance',\n      label: 'Related',\n    },\n    {\n      value: 'top',\n      label: 'Top',\n    },\n    {\n      value: 'new',\n      label: 'New',\n    },\n    {\n      value: 'comments',\n      label: 'Comments',\n    },\n  ];\n\n  const limitOptions = [\n    {\n      value: 10,\n      label: 10,\n    },\n    {\n      value: 25,\n      label: 25,\n    },\n    {\n      value: 50,\n      label: 50,\n    },\n    {\n      value: 75,\n      label: 75,\n    },\n    {\n      value: 100,\n      label: 100,\n    },\n  ];\n  return (\n    <div className=\"jumbotron mt-3\">\n      <form onSubmit={formSubmitted} onKeyPress={keyPressed}>\n        <fieldset>\n          <div className=\"form-group\">\n            <label htmlFor=\"exampleInputEmail1\">Search</label>\n            <input\n              ref={(input) => {\n                searchTerm = input;\n              }}\n              type=\"text\"\n              className=\"form-control\"\n              id=\"exampleInputEmail1\"\n              placeholder=\"Search the whole of Reddit\"\n              onChange={setSearchTerm}\n            />\n          </div>\n          <div className=\"row\">\n            <div className=\"form-group col\">\n              <label htmlFor=\"type-selection\">Type</label>\n              <select\n                className=\"form-control\"\n                id=\"type-selection\"\n                onChange={setSearchSortType}\n                defaultValue={searchData['sortOptions']}\n              >\n                {sortOptions.map((option) => {\n                  return (\n                    <option value={option.value} key={option.value}>\n                      {option.label}\n                    </option>\n                  );\n                })}\n              </select>\n            </div>\n            <div className=\"form-group col\">\n              <label htmlFor=\"no-of-results\">Results</label>\n              <select\n                className=\"form-control\"\n                id=\"no-of-results\"\n                onChange={setSearchLimit}\n                defaultValue={searchData['limit']}\n              >\n                {limitOptions.map((option) => {\n                  return (\n                    <option value={option.value} key={option.value}>\n                      {option.label}\n                    </option>\n                  );\n                })}\n              </select>\n            </div>\n          </div>\n          <button type=\"submit\" className=\"btn btn-primary\">\n            Submit\n          </button>\n        </fieldset>\n      </form>\n    </div>\n  );\n}\n\nexport default Search;\n","import React, { useEffect, useState } from 'react';\nimport { getSavedPosts, getToken, redditOAuth, searchReddit } from './api';\nimport Navbar from './components/navbar/Navbar';\nimport Posts from './components/Posts';\nimport Search from './components/Search';\n\nfunction App() {\n  const [posts, setPosts] = useState(null);\n\n  const search = async (data) => {\n    let result = await searchReddit(data);\n    setPosts(result['data']['children']);\n  };\n\n  const login = () => {\n    redditOAuth();\n  };\n\n  const loadPosts = async () => {\n    const result = await getSavedPosts();\n    setPosts(result['data']['children']);\n  };\n\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const code = urlParams.get('code');\n\n    if (code) {\n      getToken(code);\n    }\n  });\n\n  return (\n    <React.Fragment>\n      <Navbar loadPosts={loadPosts} login={login} />\n      <div className=\"container\">\n        <Search search={search} />\n        <Posts posts={posts} />\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}