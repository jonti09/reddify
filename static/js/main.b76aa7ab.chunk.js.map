{"version":3,"sources":["api/index.js","components/Posts.jsx","components/Search.jsx","App.js","serviceWorker.js","index.js"],"names":["makeQuery","params","queryParams","Object","keys","forEach","key","searchReddit","a","axios","method","url","data","Posts","props","posts","Fragment","className","map","post","text","content","class","src","alt","href","length","substr","Search","search","useState","q","limit","sort","searchData","setSearchData","searchTerm","useEffect","focus","formSubmitted","event","preventDefault","onSubmit","onKeyPress","htmlFor","ref","input","type","id","placeholder","onChange","target","value","defaultValue","name","label","option","App","setPosts","result","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b76aa7ab.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst makeQuery = (params) => {\n  let queryParams = '?';\n  if (params && Object.keys(params)) {\n    Object.keys(params).forEach((key) => {\n      queryParams = `${queryParams}${key}=${params[key]}&`;\n    });\n  }\n\n  return queryParams;\n};\n\nexport const searchReddit = async (queryParams) => {\n  const { data } = await axios({\n    method: 'GET',\n    url: `https://www.reddit.com/search.json${makeQuery(queryParams)}`,\n  });\n\n  return data;\n};\n","import React from 'react';\n\nfunction Posts(props) {\n  const { posts } = props;\n  const redditBaseUrl = 'https://reddit.com';\n\n  const getDisplayText = (text) => {\n    if (text.length > 255) {\n      return `${text.substr(0, 253)} ...`;\n    } else {\n      return text;\n    }\n  };\n\n  return posts ? (\n    <React.Fragment>\n      <div className=\"card-columns\">\n        {posts.map((post) => {\n          let content = post['data'];\n          return (\n            <div class=\"card\">\n              <img src={content['url']} class=\"card-img-top\" alt=\"\" />\n              <div class=\"card-body \">\n                <h5 class=\"card-title\">\n                  <a href={`${redditBaseUrl}${content['permalink']}`}>{content['title']}</a>\n                </h5>\n                <p class=\"card-text\">{getDisplayText(content['selftext'])}</p>\n              </div>\n              <footer class=\"card-footer\">\n                <a\n                  class=\"btn btn-outline-primary btn-sm\"\n                  href={`${redditBaseUrl}/${content['subreddit_name_prefixed']}`}\n                >\n                  {content['subreddit_name_prefixed']}\n                </a>\n                <button className=\"btn btn-outline-warning btn-sm float-right\">\n                  <span className=\"fas fa-arrow-up\"></span>\n                  <span className=\"ml-1\">{content['ups']}</span>\n                </button>\n              </footer>\n            </div>\n          );\n        })}\n      </div>\n    </React.Fragment>\n  ) : (\n    ''\n  );\n}\n\nexport default Posts;\n","import React, { useEffect, useState } from 'react';\n\nfunction Search(props) {\n  const { search } = props;\n  const [searchData, setSearchData] = useState({ q: '', limit: 25, sort: 'hot' });\n  let searchTerm = null;\n\n  useEffect(() => {\n    searchTerm.focus();\n  });\n\n  const setSearchTerm = (event) => {\n    setSearchData({ ...searchData, q: event.target.value });\n  };\n\n  const setSearchSortType = (event) => {\n    setSearchData({ ...searchData, sort: event.target.value });\n  };\n\n  const setSearchLimit = (event) => {\n    setSearchData({ ...searchData, limit: event.target.value });\n  };\n\n  const formSubmitted = (event) => {\n    search(searchData);\n    event.preventDefault();\n  };\n\n  const keyPressed = (event) => {\n    if (event.key === 'Enter') {\n      formSubmitted(event);\n    }\n  };\n\n  const sortOptions = [\n    {\n      name: 'hot',\n      label: 'Hot',\n    },\n    {\n      name: 'relevance',\n      label: 'Related',\n    },\n    {\n      name: 'top',\n      label: 'Top',\n    },\n    {\n      name: 'new',\n      label: 'New',\n    },\n    {\n      name: 'comments',\n      label: 'Comments',\n    },\n  ];\n\n  const limitOptions = [\n    {\n      value: 10,\n      label: 10,\n    },\n    {\n      value: 25,\n      label: 25,\n    },\n    {\n      value: 50,\n      label: 50,\n    },\n    {\n      value: 75,\n      label: 75,\n    },\n    {\n      value: 100,\n      label: 100,\n    },\n  ];\n  return (\n    <div className=\"jumbotron mt-3\">\n      <form onSubmit={formSubmitted} onKeyPress={keyPressed}>\n        <fieldset>\n          <div className=\"form-group\">\n            <label htmlFor=\"exampleInputEmail1\">Search</label>\n            <input\n              ref={(input) => {\n                searchTerm = input;\n              }}\n              type=\"text\"\n              className=\"form-control\"\n              id=\"exampleInputEmail1\"\n              placeholder=\"Search the whole of Reddit\"\n              onChange={setSearchTerm}\n            />\n          </div>\n          <div className=\"row\">\n            <div className=\"form-group col\">\n              <label htmlFor=\"type-selection\">Type</label>\n              <select\n                className=\"form-control\"\n                id=\"type-selection\"\n                onChange={setSearchSortType}\n                defaultValue={searchData['sortOptions']}\n              >\n                {sortOptions.map((option) => {\n                  return (\n                    <option value={option.value} key={option.value}>\n                      {option.label}\n                    </option>\n                  );\n                })}\n              </select>\n            </div>\n            <div className=\"form-group col\">\n              <label htmlFor=\"no-of-results\">Results</label>\n              <select\n                className=\"form-control\"\n                id=\"no-of-results\"\n                onChange={setSearchLimit}\n                defaultValue={searchData['limit']}\n              >\n                {limitOptions.map((option) => {\n                  return (\n                    <option value={option.value} key={option.value}>\n                      {option.label}\n                    </option>\n                  );\n                })}\n              </select>\n            </div>\n          </div>\n          <button type=\"submit\" className=\"btn btn-primary\">\n            Submit\n          </button>\n        </fieldset>\n      </form>\n    </div>\n  );\n}\n\nexport default Search;\n","import React, { useState } from 'react';\nimport { searchReddit } from './api';\nimport Posts from './components/Posts';\nimport Search from './components/Search';\n\nfunction App() {\n  const [posts, setPosts] = useState(null);\n\n  const search = async (data) => {\n    let result = await searchReddit(data);\n    setPosts(result['data']['children']);\n  };\n\n  return (\n    <React.Fragment>\n      <div className=\"container\">\n        <Search search={search} />\n        <Posts posts={posts} />\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}